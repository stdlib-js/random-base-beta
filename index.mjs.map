{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/standard_gamma.js","../lib/beta.js","../lib/sample1.js","../lib/sample2.js","../lib/sample3.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isPositive } from '@stdlib/assert-is-positive-number';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( '0Or7P', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( '0Or7T', beta ) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport ln from '@stdlib/math-base-special-ln';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport pow from '@stdlib/math-base-special-pow';\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution with rate parameter equal to 1.0 and shape parameter equal to `alpha`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction standardGamma( randu, randn, alpha ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar c;\n\tvar d;\n\tvar x;\n\tvar s;\n\tvar u;\n\tvar v;\n\n\tif ( alpha < 1.0 ) {\n\t\td = alpha + 1.0 - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = pow( randu(), 1.0/alpha );\n\t} else {\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = 1.0;\n\t}\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn d * v * s;\n}\n\n\n// EXPORTS //\n\nexport default standardGamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport standardGamma from './standard_gamma.js';\nimport sample1 from './sample1.js';\nimport sample2 from './sample2.js';\nimport sample3 from './sample3.js';\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from a beta distribution.\n*\n* @private\n* @param {PRNG} randu - pseudorandom number generator for uniformly distributed numbers\n* @param {PRNG} randn - pseudorandom number generator for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar ga;\n\tvar gb;\n\tif ( alpha === beta && alpha > 1.5 ) {\n\t\treturn sample1( randu, randn, alpha );\n\t}\n\tif ( alpha > 1.0 && beta > 1.0 ) {\n\t\treturn sample2( randu, randn, alpha, beta );\n\t}\n\tif ( alpha < 1.0 && beta < 1.0 ) {\n\t\treturn sample3( randu, alpha, beta );\n\t}\n\t// General case of using two gamma random variates:\n\tga = standardGamma( randu, randn, alpha );\n\tgb = standardGamma( randu, randn, beta );\n\treturn ga / ( ga + gb );\n}\n\n\n// EXPORTS //\n\nexport default sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Handles case where `alpha` and `beta` are equal and greater than `1.5`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha ) {\n\tvar flg;\n\tvar s4;\n\tvar A;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tt = pow( A+A, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = 0.5 * ( 1.0+(s/t) );\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ts4 = pow( s, 4.0 );\n\t\t\ty = (8.0*alpha) - 12.0;\n\t\t\ty = 1.0 - (s4 / y);\n\t\t\tif ( u <= y ) {\n\t\t\t\tflg = false;\n\t\t\t} else {\n\t\t\t\ty += 0.5 * pow( s4/((8.0*alpha)-8.0), 2.0 );\n\t\t\t\tif ( u < y ) {\n\t\t\t\t\ty = A * ln( 4.0*x*(1.0-x) );\n\t\t\t\t\ty += s*s / 2.0;\n\t\t\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\t\t\tflg = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Handles case where both `alpha` and `beta` are greater than `1.0`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar sigma;\n\tvar flg;\n\tvar mu;\n\tvar A;\n\tvar B;\n\tvar C;\n\tvar L;\n\tvar s;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tB = beta - 1.0;\n\tC = A + B;\n\tL = C * ln( C );\n\tmu = A / C;\n\tsigma = 0.5 / pow( C, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = mu + (s*sigma);\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ty = A * ln( x/A );\n\t\t\ty += B * ln((1.0-x) / B);\n\t\t\ty += L + (0.5*s*s);\n\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\tflg = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nexport default sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport exp from '@stdlib/math-base-special-exp';\nimport pow from '@stdlib/math-base-special-pow';\nimport ln from '@stdlib/math-base-special-ln';\n\n\n// MAIN //\n\n/**\n* Handles general case.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( rand, alpha, beta ) {\n\tvar lx;\n\tvar ly;\n\tvar xy;\n\tvar u;\n\tvar v;\n\tvar x;\n\tvar y;\n\twhile ( true ) {\n\t\tu = rand();\n\t\tv = rand();\n\t\tx = pow( u, 1.0/alpha );\n\t\ty = pow( v, 1.0/beta );\n\t\txy = x + y;\n\t\tif ( xy <= 1.0 ) {\n\t\t\tif ( xy > 0.0 ) {\n\t\t\t\treturn x / ( xy );\n\t\t\t}\n\t\t\tlx = ln( u ) / alpha;\n\t\t\tly = ln( v ) / beta;\n\t\t\tif ( lx > ly ) {\n\t\t\t\tly -= lx;\n\t\t\t\tlx = 0.0;\n\t\t\t} else {\n\t\t\t\tlx -= ly;\n\t\t\t\tly = 0.0;\n\t\t\t}\n\t\t\treturn exp( lx - ln( exp(lx) + exp(ly) ) );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport isFunction from '@stdlib/assert-is-function';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport noop from '@stdlib/utils-noop';\nimport { factory as randn } from '@stdlib/random-base-improved-ziggurat';\nimport { factory as randu } from '@stdlib/random-base-mt19937';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport gcopy from '@stdlib/blas-base-gcopy';\nimport Uint32Array from '@stdlib/array-uint32';\nimport isUint32Array from '@stdlib/assert-is-uint32array';\nimport copy from '@stdlib/utils-copy';\nimport typedarray2json from '@stdlib/array-to-json';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport validate from './validate.js';\nimport beta0 from './beta.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating beta distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var beta = factory( 2.0, 1.0 );\n* var v = beta();\n* // returns <number>\n*\n* @example\n* var beta = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = beta();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar rnorm;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0Or2h', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( '0Or30', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( '0Or7M', 'prng', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( '0Or7I', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( '0Or2h', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0Or30', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0Or7M', 'prng', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( '0Or7I', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = beta2;\n\t} else {\n\t\tprng = beta1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'beta' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( '0Or7J', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta1();\n\t* // returns <number>\n\t*/\n\tfunction beta1() {\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction beta2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Generates a beta distributed random number.\n*\n* ## References\n*\n* -   Ahrens, J.H., and U. Dieter. 1974. \"Computer methods for sampling from gamma, beta, poisson and bionomial distributions.\" _Computing_ 12 (3): 223–46. doi:[10.1007/BF02293108](http://dx.doi.org/10.1007/BF02293108).\n* -   Jöhnk, M.D. 1964. \"Erzeugung von Betaverteilten Und Gammaverteilten Zufallszahlen.\" _Metrika_ 8: 5–15. <http://eudml.org/doc/175224>.\n*\n* @name beta\n* @type {PRNG}\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*\n* @example\n* var r = beta( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = beta( -2.0, 5.0 );\n* // returns NaN\n*/\nvar beta = factory();\n\n\n// EXPORTS //\n\nexport default beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-beta\n*\n* @example\n* import beta from '@stdlib/random-base-beta';\n*\n* var v = beta( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-beta';\n*\n* var beta = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = beta();\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","alpha","beta","isPositive","TypeError","format","standardGamma","randu","randn","flg","x2","v0","v1","c","d","x","s","u","v","sqrt","pow","ln","sample","ga","s4","A","t","y","sample1","sigma","mu","B","C","L","sample2","rand","lx","ly","xy","exp","sample3","factory","STATE","rnorm","opts","prng","FLG","err","arguments","length","copy","isObject","hasOwnProp","isBoolean","isFunction","isUint32Array","state","gcopy","Uint32Array","setReadOnly","beta2","beta1","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","out","name","NAME","typedarray2json","params","beta0","isnan","NaN","main"],"mappings":"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"}