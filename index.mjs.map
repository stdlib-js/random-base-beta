{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/standard_gamma.js","../lib/sample1.js","../lib/sample2.js","../lib/sample3.js","../lib/beta.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1.0, 2.0 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( alpha, beta ) {\n\tif ( !isPositive( alpha ) ) {\n\t\treturn new TypeError( format( 'invalid argument. `%s` must be a positive number. Value: `%s`.', 'alpha', alpha ) );\n\t}\n\tif ( !isPositive( beta ) ) {\n\t\treturn new TypeError( format( 'invalid argument. `%s` must be a positive number. Value: `%s`.', 'beta', beta) );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar pow = require( '@stdlib/math-base-special-pow' );\n\n\n// VARIABLES //\n\nvar ONE_THIRD = 1.0 / 3.0;\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from a gamma distribution with rate parameter equal to 1.0 and shape parameter equal to `alpha`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for standard normally distributed numbers\n* @param {PositiveNumber} alpha - shape parameter\n* @returns {PositiveNumber} pseudorandom number\n*/\nfunction standardGamma( randu, randn, alpha ) {\n\tvar flg;\n\tvar x2;\n\tvar v0;\n\tvar v1;\n\tvar c;\n\tvar d;\n\tvar x;\n\tvar s;\n\tvar u;\n\tvar v;\n\n\tif ( alpha < 1.0 ) {\n\t\td = alpha + 1.0 - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = pow( randu(), 1.0/alpha );\n\t} else {\n\t\td = alpha - ONE_THIRD;\n\t\tc = 1.0 / sqrt( 9.0*d );\n\t\ts = 1.0;\n\t}\n\tflg = true;\n\twhile ( flg ) {\n\t\tdo {\n\t\t\tx = randn();\n\t\t\tv = 1.0 + (c*x);\n\t\t} while ( v <= 0.0 );\n\t\tv *= v * v;\n\t\tx2 = x * x;\n\t\tv0 = 1.0 - (0.331*x2*x2);\n\t\tv1 = (0.5*x2) + (d*( 1.0-v+ln(v) ));\n\t\tu = randu();\n\t\tif ( u < v0 || ln( u ) < v1 ) {\n\t\t\tflg = false;\n\t\t}\n\t}\n\treturn d * v * s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = standardGamma;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Handles case where `alpha` and `beta` are equal and greater than `1.5`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha ) {\n\tvar flg;\n\tvar s4;\n\tvar A;\n\tvar s;\n\tvar t;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tt = pow( A+A, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = 0.5 * ( 1.0+(s/t) );\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ts4 = pow( s, 4.0 );\n\t\t\ty = (8.0*alpha) - 12.0;\n\t\t\ty = 1.0 - (s4 / y);\n\t\t\tif ( u <= y ) {\n\t\t\t\tflg = false;\n\t\t\t} else {\n\t\t\t\ty += 0.5 * pow( s4/((8.0*alpha)-8.0), 2.0 );\n\t\t\t\tif ( u < y ) {\n\t\t\t\t\ty = A * ln( 4.0*x*(1.0-x) );\n\t\t\t\t\ty += s*s / 2.0;\n\t\t\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\t\t\tflg = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Handles case where both `alpha` and `beta` are greater than `1.0`.\n*\n* @private\n* @param {PRNG} randu - PRNG for uniformly distributed numbers\n* @param {PRNG} randn - PRNG for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar sigma;\n\tvar flg;\n\tvar mu;\n\tvar A;\n\tvar B;\n\tvar C;\n\tvar L;\n\tvar s;\n\tvar u;\n\tvar x;\n\tvar y;\n\n\tA = alpha - 1.0;\n\tB = beta - 1.0;\n\tC = A + B;\n\tL = C * ln( C );\n\tmu = A / C;\n\tsigma = 0.5 / pow( C, 0.5 );\n\n\tflg = true;\n\twhile ( flg === true ) {\n\t\ts = randn();\n\t\tx = mu + (s*sigma);\n\t\tif ( x >= 0.0 && x <= 1.0 ) {\n\t\t\tu = randu();\n\t\t\ty = A * ln( x/A );\n\t\t\ty += B * ln((1.0-x) / B);\n\t\t\ty += L + (0.5*s*s);\n\t\t\tif ( y >= ln( u ) ) {\n\t\t\t\tflg = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar exp = require( '@stdlib/math-base-special-exp' );\nvar pow = require( '@stdlib/math-base-special-pow' );\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Handles general case.\n*\n* @private\n* @param {PRNG} rand - PRNG for uniformly distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( rand, alpha, beta ) {\n\tvar lx;\n\tvar ly;\n\tvar xy;\n\tvar u;\n\tvar v;\n\tvar x;\n\tvar y;\n\twhile ( true ) {\n\t\tu = rand();\n\t\tv = rand();\n\t\tx = pow( u, 1.0/alpha );\n\t\ty = pow( v, 1.0/beta );\n\t\txy = x + y;\n\t\tif ( xy <= 1.0 ) {\n\t\t\tif ( xy > 0.0 ) {\n\t\t\t\treturn x / ( xy );\n\t\t\t}\n\t\t\tlx = ln( u ) / alpha;\n\t\t\tly = ln( v ) / beta;\n\t\t\tif ( lx > ly ) {\n\t\t\t\tly -= lx;\n\t\t\t\tlx = 0.0;\n\t\t\t} else {\n\t\t\t\tlx -= ly;\n\t\t\t\tly = 0.0;\n\t\t\t}\n\t\t\treturn exp( lx - ln( exp(lx) + exp(ly) ) );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar standardGamma = require( './standard_gamma.js' );\nvar sample1 = require( './sample1.js' );\nvar sample2 = require( './sample2.js' );\nvar sample3 = require( './sample3.js' );\n\n\n// MAIN //\n\n/**\n* Returns a random number drawn from a beta distribution.\n*\n* @private\n* @param {PRNG} randu - pseudorandom number generator for uniformly distributed numbers\n* @param {PRNG} randn - pseudorandom number generator for normally distributed numbers\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*/\nfunction sample( randu, randn, alpha, beta ) {\n\tvar ga;\n\tvar gb;\n\tif ( alpha === beta && alpha > 1.5 ) {\n\t\treturn sample1( randu, randn, alpha );\n\t}\n\tif ( alpha > 1.0 && beta > 1.0 ) {\n\t\treturn sample2( randu, randn, alpha, beta );\n\t}\n\tif ( alpha < 1.0 && beta < 1.0 ) {\n\t\treturn sample3( randu, alpha, beta );\n\t}\n\t// General case of using two gamma random variates:\n\tga = standardGamma( randu, randn, alpha );\n\tgb = standardGamma( randu, randn, beta );\n\treturn ga / ( ga + gb );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar randn = require( '@stdlib/random-base-improved-ziggurat' ).factory;\nvar randu = require( '@stdlib/random-base-mt19937' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar gcopy = require( '@stdlib/blas-base-gcopy' );\nvar Uint32Array = require( '@stdlib/array-uint32' );\nvar isUint32Array = require( '@stdlib/assert-is-uint32array' );\nvar copy = require( '@stdlib/utils-copy' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\nvar beta0 = require( './beta.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating beta distributed random numbers.\n*\n* @param {PositiveNumber} [alpha] - first shape parameter\n* @param {PositiveNumber} [beta] - second shape parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `alpha` must be a positive number\n* @throws {TypeError} `beta` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var beta = factory( 2.0, 1.0 );\n* var v = beta();\n* // returns <number>\n*\n* @example\n* var beta = factory( 2.0, 2.0, {\n*     'seed': 297\n* });\n* var v = beta();\n* // returns <number>\n*/\nfunction factory() {\n\tvar STATE;\n\tvar rnorm;\n\tvar alpha;\n\tvar beta;\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\tvar FLG;\n\tvar err;\n\n\tFLG = true;\n\tif ( arguments.length === 0 ) {\n\t\topts = {\n\t\t\t'copy': false\n\t\t};\n\t\trand = randu( opts );\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t}\n\t\t\topts = copy( opts, 1 );\n\t\t\tif ( opts.copy === false ) {\n\t\t\t\tFLG = false;\n\t\t\t} else if ( opts.state ) {\n\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t}\n\t\t\topts.copy = false;\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\talpha = arguments[ 0 ];\n\t\tbeta = arguments[ 1 ];\n\t\terr = validate( alpha, beta );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'copy' ) && !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'copy', opts.copy ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `%s`.', opts.prng ) );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\tif ( hasOwnProp( opts, 'state' ) && !isUint32Array( opts.state ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a Uint32Array. Option: `%s`.', 'state', opts.state ) );\n\t\t\t\t}\n\t\t\t\topts = copy( opts, 1 );\n\t\t\t\tif ( opts.copy === false ) {\n\t\t\t\t\tFLG = false;\n\t\t\t\t} else if ( opts.state ) {\n\t\t\t\t\topts.state = gcopy( opts.state.length, opts.state, 1, new Uint32Array( opts.state.length ), 1 ); // eslint-disable-line max-len\n\t\t\t\t}\n\t\t\t\topts.copy = false;\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\topts = {\n\t\t\t\t'copy': false\n\t\t\t};\n\t\t\trand = randu( opts );\n\t\t}\n\t}\n\tif ( opts && opts.prng ) {\n\t\trnorm = randn({\n\t\t\t'prng': opts.prng\n\t\t});\n\t} else {\n\t\tif ( opts.state ) {\n\t\t\tSTATE = opts.state;\n\t\t} else {\n\t\t\tSTATE = rand.state;\n\t\t\trand.state = STATE; // updates the underlying PRNG to point to a shared state\n\t\t}\n\t\trnorm = randn({\n\t\t\t'state': STATE,\n\t\t\t'copy': false\n\t\t});\n\t}\n\tif ( alpha === void 0 ) {\n\t\tprng = beta2;\n\t} else {\n\t\tprng = beta1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'beta' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {TypeError} must provide a `Uint32Array`\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\tif ( !isUint32Array( s ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a Uint32Array. Value: `%s`.', s ) );\n\t\t}\n\t\tif ( FLG ) {\n\t\t\ts = gcopy( s.length, s, 1, new Uint32Array( s.length ), 1 );\n\t\t}\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( alpha === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ alpha, beta ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution with bound parameter values.\n\t*\n\t* @private\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta1();\n\t* // returns <number>\n\t*/\n\tfunction beta1() {\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n\n\t/**\n\t* Returns a random number drawn from a beta distribution.\n\t*\n\t* @private\n\t* @param {PositiveNumber} alpha - first shape parameter\n\t* @param {PositiveNumber} beta - second shape parameter\n\t* @returns {Probability} pseudorandom number\n\t*\n\t* @example\n\t* var v = beta2( 2.0, 3.0 );\n\t* // returns <number>\n\t*/\n\tfunction beta2( alpha, beta ) {\n\t\tif (\n\t\t\tisnan( alpha ) ||\n\t\t\tisnan( beta ) ||\n\t\t\talpha <= 0.0 ||\n\t\t\tbeta <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta0( rand, rnorm, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Beta distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-beta\n*\n* @example\n* var beta = require( '@stdlib/random-base-beta' );\n*\n* var v = beta( 2.0, 3.0 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-beta' ).factory;\n*\n* var beta = factory( 3.0, 2.0, {\n*     'seed': 297\n* });\n*\n* var v = beta();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar beta = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( beta, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Generates a beta distributed random number.\n*\n* ## References\n*\n* -   Ahrens, J.H., and U. Dieter. 1974. \"Computer methods for sampling from gamma, beta, poisson and bionomial distributions.\" _Computing_ 12 (3): 223–46. doi:[10.1007/BF02293108](http://dx.doi.org/10.1007/BF02293108).\n* -   Jöhnk, M.D. 1964. \"Erzeugung von Betaverteilten Und Gammaverteilten Zufallszahlen.\" _Metrika_ 8: 5–15. <http://eudml.org/doc/175224>.\n*\n* @name beta\n* @type {PRNG}\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} pseudorandom number\n*\n* @example\n* var r = beta( 2.0, 5.0 );\n* // returns <number>\n*\n* @example\n* var r = beta( -2.0, 5.0 );\n* // returns NaN\n*/\nvar beta = factory();\n\n\n// EXPORTS //\n\nmodule.exports = beta;\n"],"names":["isPositive","require$$0","isPrimitive","format","require$$1","validate_1","alpha","beta","TypeError","ln","sqrt","pow","require$$2","standard_gamma","randu","randn","flg","x2","v0","v1","c","d","x","s","u","v","sample1","s4","A","t","y","sample2","sigma","mu","B","C","L","exp","sample3","rand","lx","ly","xy","standardGamma","require$$3","ga","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","isObject","isBoolean","require$$4","isFunction","require$$5","hasOwnProp","require$$6","constantFunction","require$$7","noop","require$$8","require$$9","factory","require$$10","isnan","require$$11","gcopy","require$$12","Uint32Array","require$$13","isUint32Array","require$$14","copy","require$$15","typedarray2json","require$$16","require$$17","validate","require$$18","beta0","require$$19","factory_1","STATE","rnorm","opts","prng","FLG","err","arguments","length","state","beta2","beta1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","out","name","NAME","params","NaN","lib"],"mappings":"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"}